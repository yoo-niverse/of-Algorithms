''' 리스트에 있는 요소의 값만큼 시간이 걸릴 때, 순차적으로 일을 처리함에 있어 최소시간을 계산하는 코드 '''

def min_fee(pages_to_print):
    pages_to_print.sort()
        # 작업별 소요시간을 저장한 리스트를 오름차순으로 정렬
    time_amount = 0
        # 총 작업 소요시간을 저장할 변수

    for i in range(len(pages_to_print)):
        time_amount += pages_to_print[i] * (len(pages_to_print)-i)
            # 가장 빨리 끝나는 작업을 먼저하는 것이 전체 작업시간 단축에 도움이 된다.
            # 정렬을 통해 빠른 작업 순으로 리스트를 수정하였는데, 이를 바탕으로 생각해보면
            # 총 4개의 작업이 있을 때 작업을 순서대로 a(1), b(4), c(6), d(9)라고 가정하고 계산하면
            # a = 1분 / b = 1 + 4분 / c = 1 + 4 + 6분 / d = 1 + 4 + 6 + 9분이다.
            # 이를 공식화하여 계산하면 위와 같은 계산식을 구할 수 있다.

    return time_amount

# 테스트
print(min_fee([6, 11, 4, 1]))
print(min_fee([3, 2, 1]))
print(min_fee([3, 1, 4, 3, 2]))
print(min_fee([8, 4, 2, 3, 9, 23, 6, 8]))

'''
1. 최적 부분구조가 존재하는가?
YES. 어떤 작업을 먼저 수행할지에 따라 결과가 달라지므로 각 부분문제를 해결하여 최종문제를 해결할 수 있다.

2. 탐욕적 속성이 존재하는가?
YES. 시간이 오래걸리는 작업을 먼저 수행하면 전체 수행시간이 길어지므로, 가장 빠른 작업을 먼저 수행하는게 최선이다.. 
'''
