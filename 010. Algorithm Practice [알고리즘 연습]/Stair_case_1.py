''' 입력받은 수 n개만큼의 계단을 올라가는 방법의 수를 반환하는 코드 '''
def staircase(n):
    prev = 0
    now = 1
    tmp = 0

    for i in range(n):
        tmp = now
        now = now + prev
        prev = tmp

    return now

# 테스트
print(staircase(0))
print(staircase(6))
print(staircase(15))
print(staircase(25))
print(staircase(41))

''' ------ 생각을 쉽게 하자 ------ 
최초 시도에서 계단을 5, 6, 7개 올라갈때의 조합을 직접 찾아내어보았다.
그러면서 한 계단씩만 올라가는 경우는 항상 1개,
두 계단씩 올라가는 횟수가 단 한번일 때는 항상 n-1개라는 규칙을 찾아냈다.

하지만 그 이후에 두 계단씩 올라가는 횟수가 2번, 3번 이상이 될 경우는
어떻게 계산해야할지 막막했다. 순열과 조합으로 구현하려고도 해봤고, 분할정복도 생각해봤지만
코드가 길어지기만 하고 정상적인 동작이 되지 않았다.

그러다가 계단의 수가 0일때부터 4일때까지 경우의 수를 적어보았는데
적고보니 이 문제가 피보나치 수열과 닮아있음을 알 수 있었다. 

피보나치 수열을 재귀적으로 구현할 수도 있지만 문제에서 효율적인 알고리즘을 작성하라 했으므로
시간복잡도가 가장 작은 O(n)이 되도록 반복문을 사용하여 구현했다.

* 앞으로는 이런 규칙성이 존재하는 문제를 해결할 때,
복잡하게 생각하기 앞서 계산하기 쉬운 경우들을 직접 적어보며
피보나치와 같은 쉬운 규칙을 찾을 수 있도록 먼저 노력해야 겠다.'''
