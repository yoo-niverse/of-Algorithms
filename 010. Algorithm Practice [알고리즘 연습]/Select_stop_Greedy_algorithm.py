''' 탐욕 알고리즘을 사용하여 최소한의 약수터를 들리고 정상에 도달하는 코드 구현 '''
def select_stops(water_stops, capacity):
    get_stops = []
        # 들려야하는 약수터를 저장하기 위한 리스트
    last_stop = 0
        # 마지막으로 들렸던 약수터의 위치를 저장하기위한 변수

    for i in range(len(water_stops)):
        if water_stops[i] - last_stop > capacity:
                # i번째 인덱스(현재 가까운 약수터의 위치)와 마지막으로 갔던 약수터의 거리가 물통 용량보다 크다면
            get_stops.append(water_stops[i-1])
                # 이전 약수터에 반드시 들려 물을 보충해야 한다. 그러므로 리스트에 해당 약수터 추가
            last_stop = water_stops[i-1]
                # 최근 약수터를 i-1번째 인덱스로 저장

    return get_stops


# 테스트
list1 = [1, 4, 5, 7, 11, 12, 13, 16, 18, 20, 22, 24, 26]
print(select_stops(list1, 4))

list2 = [5, 8, 12, 17, 20, 22, 23, 24, 28, 32, 38, 42, 44, 47]
print(select_stops(list2, 6))

'''
1. 최적 부분구조 존재
- 22km까지 도달하는 가장 효율적인 알고리즘 + 26km
- 24km까지 도달하는 가장 효율적인 알고리즘 + 26km
이와 같이 부분구조로 분리 가능

2. 탐욕적 속성 존재
- 물통의 용량을 토대로 가능한 멀리 있는 약수터를 들려야 최소한의 약수터를 들릴 수 있다.

------ 어려웠던 이유 ------
막상 결과를 보니 코드는 단순하지만, 어떻게 거리를 비교해야할지 고민이었다.
get_stop 리스트나 반복문, if문의 조건 등 대부분은 해설과 내 생각이 유사했으나
나는 자꾸 [i]와 [i+1]의 거리로 물통의 용량과 비교하여 구하려고 하니 결과가 제대로 안나왔다.

또, 아직 최적 부분구조와 탐욕적 속성을 완벽히 찾아내는 것이 힘들어
탐욕적 알고리즘을 적용하는 것이 효율적임을 파악하는게 쉽지않다.'''
