''' 두 개의 리스트에서 각 요소의 곱 중 최대값을 return하는 코드 '''
def max_product(left_cards, right_cards):
    # 리스트 2개를 파라미터로 받는다.

    max = 0
    for l in left_cards:
        # 왼쪽 리스트에 있는 값들을 하나씩 l에 대입
        for r in right_cards:
            # 오른쪽 리스트에 있는 값들을 하나씩 r에 대입
           if max < l * r:
               max = l * r
                # max의 값보다 요소의 곱이 크다면 max에 저장

    return max

# 테스트
print(max_product([1, 6, 5], [4, 2, 3]))
print(max_product([1, -9, 3, 4], [2, 8, 3, 1]))
print(max_product([-1, -7, 3], [-4, 3, 6]))

''' ------ 동작 설명 ------
1. 리스트 2개를 파라미터로 전달받는다.
2. 각 요소를 서로 곱하여 최대값을 찾아 반환한다.

 ------ 중요한 점 ------
 return (max(left_cards) * max(right_cards))의 형태로 간단히 해결할 수 있었겠지만,
 무작위 대입(Brute Force)는 모든 경우의 수를 직접 시행해보는 것이므로 반복문을 이용했다.
 
 한가지 생각치 못했던 것은, max를 사용할 경우 리스트에서 최대값을 찾아내기 때문에
 마지막 테스트 문에서 (-7 * -4) = 28이 될 수 있음에도, 3 * 6 = 18을 최대값으로 반환하다는 것이었다.
 max문 사용에 비해 코드가 훨씬 길어지긴 했지만 음수끼리의 곱에 대한 조건을 추가하는 것보다는 
 이런 무작위 대입이 간단한 것 같다.
 '''
